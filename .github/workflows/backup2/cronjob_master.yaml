name: Cron job for master branch

# When someone comment "/deploy" on anyone PR,
# this workflow will be triggered and run.
on:
  schedule:
    - cron: '0 23 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  CKB_CLI_VERSION: v0.40.0    
jobs:
#job for checkout the ckb
  checkout: 
    name: ckb-checkout  
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
        -  Linux-runner
        -  mac-runner
    steps:
    - name: Set env
      run: echo "CARGO_TARGET_DIR=$(echo $HOME/target)" >> $GITHUB_ENV
    - uses: actions/checkout@v2
      with:
        submodules: false
        fetch-depth: 2
        ref: ${{ github.event.pull_request.head.sha }}
        repository: ${{github.event.pull_request.head.repo.full_name}}
        #cargo build 的target，试一下在job 层加 cargo build targe
    - run: |
        echo "runner os is ${{ runner.os }}"
        if [ ${{ runner.os }} == "macOS" ]; then
        export PATH="/Users/administrator/.cargo/bin:$PATH"
        fi
        echo $PATH
        make build          
  Test: 
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
        -  Linux-runner
        -  mac-runner
    needs: checkout
    steps:
    - name: Set env
      run: echo "CARGO_TARGET_DIR=$(echo $HOME/target)" >> $GITHUB_ENV
    - name: Test
      run: |
        if [ ${{ runner.os }} == "macOS" ]; then
        export PATH="/Users/administrator/.cargo/bin:$PATH"
        fi
        make test
        # rm -rf $HOME/.cargo/registry
  Linters: 
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
        -  Linux-runner
        -  mac-runner
    needs: Test
    steps:
    - name: Set env
      run: echo "CARGO_TARGET_DIR=$(echo $HOME/target)" >> $GITHUB_ENV
    - name: Linters
      run: |
         if [ ${{ runner.os }} == "macOS" ]; then
         export PATH="/Users/administrator/.cargo/bin:$PATH"
         fi
         cargo fmt --version || travis_retry rustup component add rustfmt
         cargo clippy --version || travis_retry rustup component add clippy
         make fmt
         make clippy
         git diff --exit-code Cargo.lock
  Latest_Linters:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
        -  Linux-runner
        -  mac-runner
    needs: Linters 
    continue-on-error: true
    steps:
    - name: Set env
      run: echo "CARGO_TARGET_DIR=$(echo $HOME/target)" >> $GITHUB_ENV
    - name: Latest_Linters
      run: |
        if [ ${{ runner.os }} == "macOS" ]; then
        export PATH="/Users/administrator/.cargo/bin:$PATH"
        rustup component add rustfmt-preview
        rustup component add clippy-preview
        fi
        if [ ${{ runner.os }} == "Linux" ]; then
        rustup component add rustfmt --toolchain stable-x86_64-unknown-linux-gnu
        rustup component add clippy --toolchain stable-x86_64-unknown-linux-gnu
        fi
        mv rust-toolchain rust-toolchain.bak
        echo "stable" > rust-toolchain
        make fmt
        make clippy
        mv rust-toolchain.bak rust-toolchain
  Quick_Check:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
        -  Linux-runner
        -  mac-runner
    needs: Latest_Linters
    steps:
    - name: Set env
      run: echo "CARGO_TARGET_DIR=$(echo $HOME/target)" >> $GITHUB_ENV  
    - name: Quick_Check
      run: |
        pwd
        if [ ${{ runner.os }} == "macOS" ]; then
        export PATH="/Users/administrator/.cargo/bin:$PATH"
        fi
        make check-cargotoml
        make check-whitespaces
        make check-dirty-rpc-doc
        make check-dirty-hashes-toml
        devtools/ci/check-cyclic-dependencies.py 
  Cyclic_dev_dependencies:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
        -  Linux-runner
        -  mac-runner
    needs: Quick_Check  
    continue-on-error: true
    steps:
    - name: Set env
      run: echo "CARGO_TARGET_DIR=$(echo $HOME/target)" >> $GITHUB_ENV
    - name: Cyclic_dev_dependencies
      run: |
        if [ ${{ runner.os }} == "macOS" ]; then
        export PATH="/Users/administrator/.cargo/bin:$PATH"
        fi
        devtools/ci/check-cyclic-dependencies.py --dev
  Security_Audit_Licenses:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
        -  Linux-runner
        -  mac-runner
    needs: Cyclic_dev_dependencies
    continue-on-error: true
    steps: 
    - name: Set env
      run: echo "CARGO_TARGET_DIR=$(echo $HOME/target)" >> $GITHUB_ENV 
    - name: Security Audit & Licenses
      run: |
        if [ ${{ runner.os }} == "macOS" ]; then
        export PATH="/Users/administrator/.cargo/bin:$PATH"
        fi
        cargo deny --version || travis_retry cargo install cargo-deny --locked
        make security-audit
        make check-crates
        make check-licenses
  WASM_build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
        -  Linux-runner
        -  mac-runner
    needs: Security_Audit_Licenses
    steps: 
    - name: Set env
      run: echo "CARGO_TARGET_DIR=$(echo $HOME/target)" >> $GITHUB_ENV
    - name: WASM build
      run: |
        if [ ${{ runner.os }} == "macOS" ]; then
        export PATH="/Users/administrator/.cargo/bin:$PATH"
        fi
        export PATH=/usr/lib/llvm-8/bin:$PATH
        rustup target add wasm32-unknown-unknown
        make wasm-build-test
  Benchmarks_Test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
        -  Linux-runner
        -  mac-runner
    needs: WASM_build
    steps: 
    - name: Set env
      run: echo "CARGO_TARGET_DIR=$(echo $HOME/target)" >> $GITHUB_ENV
    - name: Benchmarks_Test
      run: |
        make bench-test
  Integration_Test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
        -  Linux-runner
        -  mac-runner
    needs: Benchmarks_Test
    steps: 
    - name: Set env
      run: echo "CARGO_TARGET_DIR=$(echo $HOME/target)" >> $GITHUB_ENV
    - name: Integration_Test
      run: |
        if [ ${{ runner.os }} == "macOS" ]; then
        export PATH="/Users/administrator/.cargo/bin:$PATH"
        fi
        RUST_BACKTRACE=1 RUST_LOG=${INTEGRATION_RUST_LOG} test/run.sh --release -- --bin $CARGO_TARGET_DIR/release/ckb ${CKB_TEST_ARGS}
  Code_Coverage:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
        -  Linux-runner
        # -  mac-runner only support for linux
    needs: Integration_Test
    steps: 
    - name: Set env
      run: echo "CARGO_TARGET_DIR=$(echo $HOME/target)" >> $GITHUB_ENV
    - name: Code Coverage
      run: |
        cargo tarpaulin --version || travis_retry cargo install cargo-tarpaulin --locked
        if make cov; then bash <(curl -s https://codecov.io/bash); fi
      env: 
        CACHE_NAME: tarpaulin

        

 


